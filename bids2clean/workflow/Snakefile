#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids

from pathlib import Path
# from scripts.mp2rage_genUniDen.mp2rage_genUniDen import mp2rage_genUniDen
from os.path import join

configfile: workflow.source_path('../config/snakebids.yml')

# Get input wildcards
inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    use_bids_inputs=True,
)



#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(config['pybids_inputs'])

#---- end snakebids boilerplate ------------------------------------------------

rule grad_correction:
    input: 
        bids_dir = config['bids_dir'],
        grad_coef_file = config['grad_coeff_file'],
    params:
        grad_corr_dir = bids(
            root = 'derivatives',
            suffix = 'gradcorrect'
        ),
        gradcorrect_script = join(workflow.basedir,'../workflow/scripts/gradcorrect/run.sh')
    output: 
        done = bids(
            root='work',
            suffix = 'gradcorr.done',
            **inputs.subj_wildcards
            )
    container: config['singularity']['gradcorrect']
    group: 'subj1'
    threads: 8
    resources:
        mem_mb = 16000,
        time = 1440
    log: bids(root='logs',suffix='gradcorrect.log',**inputs.subj_wildcards)
    shell:
        """
        {params.gradcorrect_script} {input.bids_dir} {params.grad_corr_dir} participant --grad_coeff_file {input.grad_coef_file} --participant_label {wildcards.subject} &> {log}
        touch {output.done}
        """ 

rule mp2rage_correction:
    input: 
        grad_corr_done = rules.grad_correction.output.done,
    params:
        grad_corr_dir = bids(
            root = 'derivatives',
            suffix = 'gradcorrect'
        ),
        mp2rage_correction_dir = bids(
            root = 'derivatives',
            suffix = 'mp2rage_correction',
        ),
        mp2rage_correction_script = join(workflow.basedir,'../workflow/scripts/mp2rage_correction/mp2rage_correction')
    output:
        done = bids(
            root = 'work',
            suffix = 'mp2rage_corr.done',
            **inputs.subj_wildcards
        ),
    container: config['singularity']['mp2rage_correction']
    group: 'subj1'
    threads: 8
    resources:
        mem_mb = 16000,
        time = 1440
    log: bids(root='logs',suffix='mp2ragecorr.log',**inputs.subj_wildcards)
    shell:
        """
        {params.mp2rage_correction_script} {params.grad_corr_dir} {params.mp2rage_correction_dir}  participant --participant_label {wildcards.subject} &> {log}
        touch {output.done}
        """ 

# rule gen_t1w:
#     input:
#         mp2rage_correction_done = rules.mp2rage_correction.output.done,
#     params:
#         mp2rage_correction_dir = bids(
#             root = 'derivatives',
#             suffix = 'mp2rage_correction'
#         ),
#         gen_t1w_script= join(workflow.basedir,'../workflow/scripts/mp2rage_genUniDen/mp2rage_genUniDen.py'),
#         get_paths_script = join(workflow.basedir,'../workflow/scripts/gen_t1w_paths.py')
#     output:
#         t1w_output = bids(
#             root = 'derivatives/gen_t1w',
#             datatype = 'anat',
#             acq = 'genUNIDEN',
#             suffix = 'T1w.nii.gz',
#             **inputs.subj_wildcards
#         )
#     group: 'subj'
#     threads: 8
#     resources:
#         mem_mb = 16000,
#         time = 180
#     log: bids(root='logs',suffix='gent1w.log',**inputs.subj_wildcards)   
#     shell:
#         """
#         uni=$(python {params.get_paths_script} {params.mp2rage_correction_dir} {wildcards.subject} "uni") &> {log}
#         inv1=$(python {params.get_paths_script} {params.mp2rage_correction_dir} {wildcards.subject} "inv1") &> {log}
#         inv2=$(python {params.get_paths_script} {params.mp2rage_correction_dir} {wildcards.subject} "inv2") &> {log}
        
#         python {params.gen_t1w_script} "$uni" "$inv1" "$inv2" {output.t1w_output} &> {log}
#         """


# rule qsm_sstv:
#     input: 
#         grad_corr = rules.grad_correction.output.done
#     params:
#         qsm_sstv = bids(
#             root = 'derivative',
#             suffix = 'qsm_sstv'
#         )
#     output:
#         done = touch(bids(
#             root = 'work',
#             datatype = 'qsm_sstv',
#             suffix = 'qsm_sstv.done',
#             **inputs.subj_wildcards
#         )),
#     group: 'subj'        
#     container: config['singularity']['qsm_sstv']
#     shell:
#         """
#         qsm_sstv
#         """

rule synthstrip:
    input:
        mp2rage_correction_done = rules.mp2rage_correction.output.done,
    params:
        container_path = config['singularity']['synthstrip'],
        synthstrip_script = join(workflow.basedir,'../workflow/scripts/synthstrip-singularity'),
        get_paths_script = join(workflow.basedir,'../workflow/scripts/gen_t1w_paths.py'),
        mp2rage_correction_dir = bids(
            root = 'derivatives',
            suffix = 'mp2rage_correction',
        ),
    output: 
        skstrip = bids(
            root = 'derivatives/synthstrip',
            datatype = 'anat',
            acq = 'genUNIDEN',
            desc = 'synthstrip',
            suffix = 'T1w.nii.gz',
            **inputs.subj_wildcards
        ),
        mask = bids(
            root = 'derivatives/synthstrip',
            datatype = 'anat',
            acq = 'genUNIDEN',
            space = 'T1w',
            suffix = 'brainmask.nii.gz',
            **inputs.subj_wildcards
        )
    group: 'subj1'
    threads: 8
    resources:
        mem_mb = 16000,
        time = 180
    log: bids(root='logs',suffix='sythstrip.log',**inputs.subj_wildcards)  
    shell:
        """
        t1w_path=$(python {params.get_paths_script} {params.mp2rage_correction_dir} sub-{wildcards.subject})
        echo $t1w_path &> {log}
        python {params.synthstrip_script} {params.container_path} -i $t1w_path -o {output.skstrip} -m {output.mask} &> {log}
        """ 

# rule presurfer:
#     input: 
#     output:
#     container: config['singularity']['spm']
#     group: 'subj'
#     threads: 8
#     resources:
#         mem_mb: 16000
#         time: 180
#     log:  
#     shell: 
#         """
        
#         """
# rule freesurfer:
#     input: 
#         t1w_skstrip = rules.synthstrip.output.skstrip,
#         fs_license = config ['fs_license']
#     params:
#         fsdir = bids(
#             root = 'derivatives',
#             suffix = 'freesurfer'
#         ),
#     output:
#         done = bids(
#             root = 'work',
#             suffix = 'freesurfer.done',
#             **inputs.subj_wildcards
#         ),
#     container: config['singularity']['freesurfer']
#     group: 'subj'
#     threads: 8
#     resources:
#         mem_mb = 16000,
#         time = 1440 
#     log: bids(root='logs', suffix = 'freesurfer.log',**inputs.subj_wildcards)
#     shell: 
#         """
#         export
#         recon-all -subjid sub-{wildcards.subject} -i {input.t1w_skstrip} -all -noskullstrip
#         /fastsurfer/run_fastsurfer.sh --fs_license {input.fs_license} --sid sub-{wildcards.subject} --sd {params.fsdir} --t1 {input.t1w_skstrip} --seg_log {log.seg_log} &> {log.fastsurfer}
#         touch {params.fsdir}/sub-{wildcards.subject}/mri/aseg.auto_noCCseg.label_intensities.txt
#         touch {output.done}
#         """

# rule fastsurfer:
#     input: 
#         t1w_skstrip = rules.synthstrip.output.skstrip,
#         fs_license = config ['fs_license']
#     params:
#         fsdir = bids(
#             root = 'derivatives',
#             suffix = 'freesurfer'
#         ),
#     output:
#         done = bids(
#             root = 'work',
#             suffix = 'fastsurfer.done',
#             **inputs.subj_wildcards
#         ),
#     container: config['singularity']['fastsurfer']
#     group: 'subj'
#     threads: 8
#     resources:
#         mem_mb = 16000,
#         time = 1440 
#     log: 
#         fastsurfer = bids(root='logs', suffix = 'fastsurfer.log',**inputs.subj_wildcards),
#         seg_log = bids(root='logs', suffix = 'deepseg.log',**inputs.subj_wildcards),
#     shell: 
#         """
#         /fastsurfer/run_fastsurfer.sh --fs_license {input.fs_license} --sid sub-{wildcards.subject} --sd {params.fsdir} --t1 {input.t1w_skstrip} --seg_log {log.seg_log} &> {log.fastsurfer}
#         touch {params.fsdir}/sub-{wildcards.subject}/mri/aseg.auto_noCCseg.label_intensities.txt
#         touch {output.done}
        # """

rule symlinks:
    input: 
        sk_t1w = rules.synthstrip.output.skstrip
    params:
        grad_corr_dir = bids(
            root = 'derivatives',
            suffix = 'gradcorrect'
        ),
        fmriprep_in = bids(
            root = 'derivatives',
            suffix = 'fmriprep_in'
        ),
        symlink_script = join(workflow.basedir,'../workflow/scripts/fmriprep_input_symlink.sh'),
    output: 
        done = bids(
            root = 'work',
            suffix = 'symlink.done',
            **inputs.subj_wildcards
        ),
    group: 'subj1'
    log: bids(root='logs', suffix = 'symlinks.log', **inputs.subj_wildcards)
    shell:
        """
        bash {params.symlink_script} {params.grad_corr_dir} {input.sk_t1w} {params.fmriprep_in} {wildcards.subject} &> {log}
        touch {output.done}
        """

rule fmriprep:
    input: 
        sk_done = rules.symlinks.output.done,
        fs_license = config['fs_license']
    params:
        fmriprep_in = bids(
            root = 'derivatives',
            suffix = 'fmriprep_in'
        ),
        fmriprep_dir = bids(
            root = 'derivatives',
            suffix = 'fmriprep'
        ),
        fs_dir = bids(
            root = 'derivatives',
            suffix = 'freesurfer'
        )
    output: 
        done = bids(
            root = 'work',
            suffix = 'fmriprep.done',
            **inputs.subj_wildcards
        ),
    container: config['singularity']['fmriprep']
    group: 'subj2'
    threads: 8
    resources:
        mem_mb = 16000,
        time = 1440 
    log: bids(root='logs', suffix = 'fmriprep.log',**inputs.subj_wildcards)
    shell: 
        """
        fmriprep {params.fmriprep_in} {params.fmriprep_dir} participant --participant-label {wildcards.subject} --skip_bids_validation  --skull-strip-t1w auto --fs-license-file {input.fs_license} --cifti-output 91k &> {log}
        touch {output.done}
        """

# rule aslprep:
#     input: 
#         fmriprep_done = rules.fmriprep.output.done,
#         fs_license = config['fs_license']
#     params:
#         fmriprep_in = bids(
#             root = 'derivatives',
#             suffix = 'fmriprep_in'
#         ),
#         aslprep_dir = bids(
#             root = 'derivatives',
#             suffix = 'aslprep'
#         ),
#     output: 
#         done = bids(
#             root = 'work',
#             suffix = 'aslprep.done',
#             **inputs.subj_wildcards
#         ),
#     container: config['singularity']['aslprep']
#     group: 'subj2'
#     threads: 8
#     resources:
#         mem_mb = 16000,
#         time = 1440 
#     log: bids(root='logs', suffix = 'aslprep.log',**inputs.subj_wildcards)
#     shell: 
#         """
#         aslprep {params.fmriprep_in} {params.aslprep_dir} participant --participant-label {wildcards.subject} --skip_bids_validation  --skull-strip-t1w auto --fs-license-file {input.fs_license} &> {log}
#         touch {output.done}
#         """

# rule hippunfold:
#     input: 
#         symlink_done = rules.symlink.output.done
#     params:
#         fmriprep_in = bids(
#             root = 'derivatives',
#             suffix = 'fmriprep_in'
#         ),
#         hippunfold_out = bids(
#             root = 'derivatives',
#             suffix = 'hippunfold'
#         )
#     output:
#         done = bids(
#             root = 'work',
#             suffix = 'hippunfold.done',
#             **inputs.subj_wildcards
#         ),
#     container: config['singularity']['hippunfold']
#     group: 'subj3'
#     threads: 8
#     resources:
#         mem_mb = 16000,
#         time = 180
#     log: bids(root='logs', suffix = 'hippunfold.log',**inputs.subj_wildcards)
#     shell:
#         """
#         hippunfold {params.fmriprep_in} {params.hippunfold_out} participant &> {log}
#         touch {output.done}
#         """

rule all:
    input:
        # expand(
        #     rules.gen_t1w.output.t1w_output,
        #     zip,
        #     **inputs.input_zip_lists['scans_tsv']
        # ),
        # expand(
        #     rules.synthstrip.output.mask,
        #     zip,
        #     **inputs.input_zip_lists['scans_tsv']
        # ),
        expand(
            rules.fmriprep.output.done,
            zip,
            **inputs.input_zip_lists['scans_tsv']
            ),
        # expand(
        #     rules.aslprep.output.done,
        #     zip,
        #     **inputs.input_zip_lists['scans_tsv']
        #     ),
        # expand(
        #     rules.hippunfold.output.done,
        #     zip,
        #     **inputs.input_zip_lists['scans_tsv']
        #     ),
    default_target: True